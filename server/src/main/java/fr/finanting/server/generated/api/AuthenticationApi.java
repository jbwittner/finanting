/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.finanting.server.generated.api;

import fr.finanting.server.generated.model.LoginDTO;
import fr.finanting.server.generated.model.LoginParameter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-13T16:22:45.636055+02:00[Europe/Paris]")
@Validated
@Api(value = "authentication", description = "the authentication API")
public interface AuthenticationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /authentication/login : Login
     *
     * @param loginParameter Object that need to be authenticated (optional)
     * @return successful operation (status code 201)
     */
    @ApiOperation(value = "Login", nickname = "login", notes = "", response = LoginDTO.class, tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = LoginDTO.class) })
    @PostMapping(
        value = "/authentication/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LoginDTO> login(@ApiParam(value = "Object that need to be authenticated"  )  @Valid @RequestBody(required = false) LoginParameter loginParameter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jwt\" : \"jwt\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /authentication/logout : Logout
     *
     * @return successful operation (status code 201)
     */
    @ApiOperation(value = "Logout", nickname = "logout", notes = "", tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation") })
    @PostMapping(
        value = "/authentication/logout"
    )
    default ResponseEntity<Void> logout() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /authentication/test : Test the connection
     *
     * @return successful operation (status code 201)
     */
    @ApiOperation(value = "Test the connection", nickname = "test", notes = "", tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation") })
    @PostMapping(
        value = "/authentication/test"
    )
    default ResponseEntity<Void> test() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
