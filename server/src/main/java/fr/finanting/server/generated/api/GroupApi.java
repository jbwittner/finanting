/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.finanting.server.generated.api;

import fr.finanting.server.generated.model.AddUsersGroupParameter;
import fr.finanting.server.generated.model.GroupDTO;
import fr.finanting.server.generated.model.GroupParameter;
import fr.finanting.server.generated.model.RemoveUsersGroupParameter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-27T23:54:16.397484+02:00[Europe/Paris]")
@Validated
@Api(value = "group", description = "the group API")
public interface GroupApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /group/addUserGroup : Add user to a group
     *
     * @param addUsersGroupParameter Object that needs to be send to add a user (optional)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Add user to a group", nickname = "addUserGroup", notes = "", response = GroupDTO.class, tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GroupDTO.class) })
    @PostMapping(
        value = "/group/addUserGroup",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GroupDTO> addUserGroup(@ApiParam(value = "Object that needs to be send to add a user"  )  @Valid @RequestBody(required = false) AddUsersGroupParameter addUsersGroupParameter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupName\" : \"groupName\", \"userAdmin\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, \"groupUsers\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /group : Create a new group
     *
     * @param groupParameter Object that needs to be send to create a group (optional)
     * @return successful operation (status code 201)
     */
    @ApiOperation(value = "Create a new group", nickname = "createGroup", notes = "", response = GroupDTO.class, tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = GroupDTO.class) })
    @PutMapping(
        value = "/group",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GroupDTO> createGroup(@ApiParam(value = "Object that needs to be send to create a group"  )  @Valid @RequestBody(required = false) GroupParameter groupParameter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupName\" : \"groupName\", \"userAdmin\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, \"groupUsers\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /group/{groupId} : Delete a group
     *
     * @param groupId Group id to delete (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Delete a group", nickname = "deleteGroup", notes = "", tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @DeleteMapping(
        value = "/group/{groupId}"
    )
    default ResponseEntity<Void> deleteGroup(@ApiParam(value = "Group id to delete",required=true) @PathVariable("groupId") Integer groupId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /group/{groupId} : Get a group
     *
     * @param groupId Group id to delete (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get a group", nickname = "getGroup", notes = "", response = GroupDTO.class, tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GroupDTO.class) })
    @GetMapping(
        value = "/group/{groupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<GroupDTO> getGroup(@ApiParam(value = "Group id to delete",required=true) @PathVariable("groupId") Integer groupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupName\" : \"groupName\", \"userAdmin\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, \"groupUsers\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /group : Get groups of user
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get groups of user", nickname = "getGroups", notes = "", response = GroupDTO.class, responseContainer = "List", tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GroupDTO.class, responseContainer = "List") })
    @GetMapping(
        value = "/group",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GroupDTO>> getGroups() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupName\" : \"groupName\", \"userAdmin\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, \"groupUsers\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /group/removeUsersGroup : Remove user to a group
     *
     * @param removeUsersGroupParameter Object that needs to be send to remove a user (optional)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Remove user to a group", nickname = "removeUserGroup", notes = "", response = GroupDTO.class, tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GroupDTO.class) })
    @PostMapping(
        value = "/group/removeUsersGroup",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GroupDTO> removeUserGroup(@ApiParam(value = "Object that needs to be send to remove a user"  )  @Valid @RequestBody(required = false) RemoveUsersGroupParameter removeUsersGroupParameter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupName\" : \"groupName\", \"userAdmin\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, \"groupUsers\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ \"ADMIN\", \"ADMIN\" ], \"userName\" : \"userName\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
