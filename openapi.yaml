openapi: 3.0.1
info:
  title: Swagger Finanting
  description: This is a sample server Finanting server.
  contact:
    email: jeanbaptiste.wittner@outlook.com
  license:
    name: GPL-3.0 License
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 1.0.5
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost:9080
tags:
  - name: admin
    description: Administration of the application
  - name: bankingAccount
    description: Management of banking accounts
  - name: bankingTransaction
    description: Management of banking transactions
  - name: category
    description: Management of categories
  - name: classification
    description: Management of classifications
  - name: currency
    description: Management of currencies
  - name: group
    description: Management of groups
  - name: third
    description: Management of thirds
  - name: user
    description: Management of users

paths:
  /user/registration:
    put:
      tags:
        - user
      summary: Register a new user account
      operationId: userRegistration
      requestBody:
        description: Object that needs to be send to register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationParameter'
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      security:
        - basicAuth: []
  /user:
    post:
      tags:
        - user
      summary: Update account informations
      operationId: userUpdate
      requestBody:
        description: Object that needs to be send to update a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateParameter'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    get:
      tags:
        - user
      summary: Get account informations
      operationId: userGet
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

  /user/updatePassword:
    post:
      tags:
        - user
      summary: Update the password of the user
      operationId: userPasswordUpdate
      requestBody:
        description: Object that needs to be send to update a user password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateParameter'
      responses:
        200:
          description: successful operation
      security:
        - basicAuth: []
  /group:
    put:
      tags:
        - group
      summary : Create a new group
      operationId: createGroup
      requestBody:
        description: Object that needs to be send to create a group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupParameter'
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDTO'
    get:
      tags:
        - group
      summary : Get groups of user
      operationId: getGroups
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDTO'

  /group/{groupId}:
    delete:
      tags:
        - group
      summary : Delete a group
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          description: Group id to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
    get:
      tags:
        - group
      summary : Get a group
      operationId: getGroup
      parameters:
        - name: groupId
          in: path
          description: Group id to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDTO'

  /group/removeUsersGroup:
    post:
      tags:
        - group
      summary : Remove user to a group
      operationId: removeUserGroup
      requestBody:
        description: Object that needs to be send to remove a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveUsersGroupParameter'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDTO'
  /group/addUserGroup:
    post:
      tags:
        - group
      summary : Add user to a group
      operationId: addUserGroup
      requestBody:
        description: Object that needs to be send to add a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUsersGroupParameter'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDTO'

  /category:
    put:
      tags:
        - category
      summary: aaaaaaaaaaaaa
      operationId: createCategory
      requestBody:
        description: aaaaaaaaaaaaa
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryParameter'
      responses:
        201:
          description: aaaaaaaaaaaaa
    get:
      tags:
        - category
      summary: aaaaaaaaaaaaa
      operationId: getUserCategories
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeCategoryDTO'

  /category/{categoryId}:
    delete:
      tags:
        - category
      summary: aaaaaaaaaaaaa
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: aaaaaaaaaaaaa
          required: true
          schema:
            type: integer
      responses:
        200:
          description: aaaaaaaaaaaaa
    post:
      tags:
        - category
      summary: aaaaaaaaaaaaa
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          description: aaaaaaaaaaaaa
          required: true
          schema:
            type: integer

      requestBody:
        description: aaaaaaaaaaaaa
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryParameter'
      responses:
        200:
          description: aaaaaaaaaaaaa

  /category/{groupId}:
    get:
      tags:
        - category
      summary: aaaaaaaaaaaaa
      operationId: getGroupCategories
      parameters:
        - name: groupId
          in: path
          description: aaaaaaaaaaaaa
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeCategoryDTO'

components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    UserDTO:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
              - ADMIN
              - USER

    GroupDTO:
      type: object
      properties:
        groupName:
          type: string
        userAdmin:
          $ref: '#/components/schemas/UserDTO'
        groupUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'

    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
        abbreviation:
          type: string
        description:
          type: string
        categoryType:
          type: string
          enum:
            - EXPENSE
            - REVENUE

    TreeCategoryDTO:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
        abbreviation:
          type: string
        description:
          type: string
        categoryType:
          type: string
          enum:
            - EXPENSE
            - REVENUE
        childTreeCategoriesDTOs:
          type: array
          items:
            $ref: '#/components/schemas/TreeCategoryDTO'

    UserRegistrationParameter:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
      required:
        - userName
        - email
        - firstName
        - lastName
        - password

    UserUpdateParameter:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
      required:
        - userName
        - email
        - firstName
        - lastName

    PasswordUpdateParameter:
      type: object
      properties:
        previousPassword:
          type: string
        newPassword:
          type: string
      required:
        - previousPassword
        - newPassword

    GroupParameter:
      type: object
      properties:
        groupName:
          type: string
        usersName:
          type: array
          items:
            type: string
      required:
        - groupName

    RemoveUsersGroupParameter:
      type: object
      properties:
        groupName:
          type: string
        usersName:
          type: array
          items:
            type: string
      required:
        - groupName
        - usersName

    AddUsersGroupParameter:
      type: object
      properties:
        groupName:
          type: string
        usersName:
          type: array
          items:
            type: string
      required:
        - groupName
        - usersName

    CategoryParameter:
      type: object
      properties:
        parentId:
          type: integer
        label:
          type: string
        abbreviation:
          type: string
        description:
          type: string
        groupName:
          type: string
        categoryType:
          type: string
          enum:
            - EXPENSE
            - REVENUE
      required:
        - label
        - abbreviation
