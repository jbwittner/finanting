openapi: 3.0.1
info:
  title: Swagger Finanting
  description: This is a sample server Finanting server.
  contact:
    email: jeanbaptiste.wittner@outlook.com
  license:
    name: GPL-3.0 License
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 1.0.5
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost:9080
tags:
  - name: admin
    description: Administration of the application
  - name: bankingAccount
    description: Management of banking accounts
  - name: bankingTransaction
    description: Management of banking transactions
  - name: category
    description: Management of categories
  - name: classification
    description: Management of classifications
  - name: currency
    description: Management of currencies
  - name: group
    description: Management of groups
  - name: third
    description: Management of thirds
  - name: user
    description: Management of users

paths:
  /user:
    put:
      tags:
        - user
      summary: Register a new user account
      operationId: userRegistration
      requestBody:
        description: Object that needs to be send to register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationParameter'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      security:
        - basicAuth: []
    post:
      tags:
        - user
      summary: Update account informations
      operationId: userUpdate
      requestBody:
        description: Object that needs to be send to update a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateParameter'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    get:
      tags:
        - user
      summary: Get account informations
      operationId: userGet
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

  /user/updatePassword:
    post:
      tags:
        - user
      summary: Update the password of the user
      operationId: userPasswordUpdate
      requestBody:
        description: Object that needs to be send to update a user password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateParameter'
      responses:
        200:
          description: successful operation
      security:
        - basicAuth: []

components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    UserDTO:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
              - ADMIN
              - USER
    UserRegistrationParameter:
      type: object
      properties:
        userName:
          type: string
          nullable: false
          minLength: 1
        email:
          type: string
          format: email
          nullable: false
          minLength: 1
        firstName:
          type: string
          nullable: false
          minLength: 1
        lastName:
          type: string
          nullable: false
          minLength: 1
        password:
          type: string
          nullable: false
          minLength: 1
      required:
        - userName
        - email
        - firstName
        - lastName
        - password

    UserUpdateParameter:
      type: object
      properties:
        userName:
          type: string
          nullable: false
          minLength: 1
        email:
          type: string
          format: email
          nullable: false
          minLength: 1
        firstName:
          type: string
          nullable: false
          minLength: 1
        lastName:
          type: string
          nullable: false
          minLength: 1
      required:
        - userName
        - email
        - firstName
        - lastName

    PasswordUpdateParameter:
      type: object
      properties:
        previousPassword:
          type: string
          nullable: false
          minLength: 1
        newPassword:
          type: string
          nullable: false
          minLength: 1
      required:
        - previousPassword
        - newPassword